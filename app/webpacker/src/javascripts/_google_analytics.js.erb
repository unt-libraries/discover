import 'autotrack/lib/plugins/event-tracker';
import 'autotrack/lib/plugins/max-scroll-tracker';
import 'autotrack/lib/plugins/page-visibility-tracker';
import 'autotrack/lib/plugins/outbound-link-tracker';
import { getCLS, getFCP, getFID, getLCP, getTTFB } from 'web-vitals';
import { actWithTimeOut } from "./_utils";

// Google analytics custom dimensions
const gaDimensions = {
  'dimension1': 'access_facet',
  'dimension2': 'resource_type_facet',
  'dimension3': 'collection_facet',
  'dimension4': 'building_facet',
  'dimension5': 'shelf_facet',
  'dimension6': 'publication_year_facet',
  'dimension7': 'publication_decade_facet',
  'dimension8': 'languages',
  'dimension9': 'public_author_facet',
  'dimension10': 'public_title_facet',
  'dimension11': 'public_series_facet',
  'dimension12': 'meetings_facet',
  'dimension13': 'public_genre_facet',
  'dimension14': 'public_subject_facet',
  'dimension15': 'geographic_terms_facet',
  'dimension16': 'era_terms_facet',
  'dimension17': 'game_duration_facet_field',
  'dimension18': 'game_players_facet_field',
  'dimension19': 'game_age_facet_field',
  'dimension20': 'newly_added_facet',
}

function init() {
  // Additional google analytics code
  window.ga = window.ga || ((...args) => (ga.q = ga.q || []).push(args));

  ga('create', '<%= Rails.application.credentials[Rails.env.to_sym][:google_analytics] %>', 'auto');
  ga('require', 'eventTracker');
  ga('require', 'maxScrollTracker');
  ga('require', 'pageVisibilityTracker', {
    sendInitialPageview: true,
  });
  ga('require', 'outboundLinkTracker', {
    fieldsObj: {
      eventCategory: "link - content - external",
      eventAction: `${window.location.pathname}${window.location.search}`,
    }
  });
  ga('set', 'anonymizeIp', true);
  ga('set', 'transport', 'beacon');
  console.log('analytics loaded');
}

// Report javascript errors
function trackErrors() {
  if (window.addEventListener) {
    window.addEventListener('error', (e) => {
      if (e.lineno !== 0) {
        const ie = window.event || {};
        const errMsg = e.message || ie.errorMessage;
        const errSrc = e.filename || ie.errorUrl;
        const errLine = e.lineno || ie.errorLine;
        const gaCat = 'JavaScript Error';
        const gaAction = `${errMsg} in: ${errSrc} on line ${errLine}`;
        const bodyEl = document.querySelector('body');
        const gaLabel = bodyEl.dataset.blacklightContext;
        const url = document.location.href;

        ga('send', 'event', gaCat, gaAction, `${gaLabel} - ${url}`, {
          nonInteraction: true,
        });
      }
    });
  }
}

// Track submittes searches
function trackSearchForm() {
  const bodyEl = document.querySelector('body');
  const searchForms = bodyEl.querySelectorAll('.search-query-form');

  searchForms.forEach((node) => {
    node.addEventListener('submit', (e) => {
      e.preventDefault();

      const category = `Search - ${location.search == '' ? 'home' : 'results'}`;
      const action = node.querySelector('#search_field').value;
      const label = node.querySelector('#q').value;
      const value = label.split(' ').length || 0;

      const dimensionValues = {};

      for (let [key, value] of Object.entries(gaDimensions)) {
        const facetNodes = node.querySelectorAll(`input[name="f[${value}][]"`);
        const facetValues = [...facetNodes].map(facetNode => facetNode.value).join(', ');
        dimensionValues[key] = facetValues;
      }

      function submitForm() {
        node.submit();
      }

      ga("send", "event", category, action, label, value, {
        ...dimensionValues,
        hitCallback: actWithTimeOut(function(){
          submitForm();
        }),
      });
    });
  })
}

// Track Bib Record clicks
function trackShowRecordFacets() {
  const bodyEl = document.querySelector('body');
  const viewContext = bodyEl.dataset.blacklightContext;
  if (viewContext !== 'show') return;
  const mainContainer = bodyEl.querySelector('#main-container');
  const links = mainContainer.querySelectorAll('.result__value a');

  links.forEach((node) => {
    if (node.hasAttribute('ga-on')) return;
    const valueContainer = node.closest('.result__value');
    if (valueContainer === null) return;
    const category = 'Bib Record';
    const action = valueContainer.dataset.cardTitle;
    const label = valueContainer.dataset.fieldName;

    node.setAttribute('ga-on', 'click');
    node.setAttribute('ga-event-category', category);
    node.setAttribute('ga-event-action', action);
    node.setAttribute('ga-event-label', label);
  })
}

// Track the position in search results of a document when clicked
// Called from the Blacklight search context handler
function trackDocPosition(link) {
  const bodyEl = document.querySelector('body');
  const viewContext = bodyEl.dataset.blacklightContext;
  if (viewContext !== 'index') return;

  const valueContainer = link.closest('article.document');
  if (valueContainer === null) return;
  const category = 'List Item Link';
  const docPosition = parseInt(valueContainer.dataset.documentCounter) + 1;
  const action = 'Result Item Placement';
  const label = `Results # ${docPosition}`;
  const value = '1';

  ga("send", "event", category, action, label, value);
}

// Track document position for links not bound in Blacklight search context
function trackNoContextDocPosition() {
  const bodyEl = document.querySelector('body');
  const viewContext = bodyEl.dataset.blacklightContext;
  if (viewContext !== 'index') return;
  const docContainer = bodyEl.querySelector('#documents');
  if (docContainer === null) return;
  const links = docContainer.querySelectorAll('a:not([data-context-href])');

  links.forEach(node => {
    node.addEventListener('click', () => {
      trackDocPosition(node);
    })
  })
}

function trackWebVitals() {
  getCLS(sendWebVitalsToGoogleAnalytics);
  getFID(sendWebVitalsToGoogleAnalytics);
  getLCP(sendWebVitalsToGoogleAnalytics);
  getFCP(sendWebVitalsToGoogleAnalytics);
  getTTFB(sendWebVitalsToGoogleAnalytics);
}

function sendWebVitalsToGoogleAnalytics({name, delta, id}) {
  // Assumes the global `ga()` function exists, see:
  // https://developers.google.com/analytics/devguides/collection/analyticsjs
  ga('send', 'event', {
    eventCategory: 'Web Vitals',
    eventAction: name,
    // Google Analytics metrics must be integers, so the value is rounded.
    // For CLS the value is first multiplied by 1000 for greater precision
    // (note: increase the multiplier for greater precision if needed).
    eventValue: Math.round(name === 'CLS' ? delta * 1000 : delta),
    // The `id` value will be unique to the current page load. When sending
    // multiple values from the same page (e.g. for CLS), Google Analytics can
    // compute a total by grouping on this ID (note: requires `eventLabel` to
    // be a dimension in your report).
    eventLabel: id,
    // Use a non-interaction event to avoid affecting bounce rate.
    nonInteraction: true,
  });
}

export {
  init,
  trackErrors,
  trackSearchForm,
  trackShowRecordFacets,
  trackDocPosition,
  trackNoContextDocPosition,
  trackWebVitals,
}
