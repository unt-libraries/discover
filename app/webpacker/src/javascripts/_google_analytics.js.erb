import 'autotrack/lib/plugins/event-tracker';
import 'autotrack/lib/plugins/max-scroll-tracker';
import 'autotrack/lib/plugins/page-visibility-tracker';
import 'autotrack/lib/plugins/outbound-link-tracker';
import { actWithTimeOut } from "./_utils";


function init() {
  // Additional google analytics code
  window.ga = window.ga || ((...args) => (ga.q = ga.q || []).push(args));

  ga('create', '<%= Rails.application.credentials[Rails.env.to_sym][:google_analytics] %>', 'auto');
  ga('require', 'eventTracker');
  ga('require', 'maxScrollTracker');
  ga('require', 'pageVisibilityTracker', {
    sendInitialPageview: true,
  });
  ga('require', 'outboundLinkTracker', {
    fieldsObj: {
      eventCategory: "link - content - external",
      eventAction: `${window.location.pathname}${window.location.search}`,
    }
  });
  ga('set', 'anonymizeIp', true);
  ga('set', 'transport', 'beacon');
  console.log('analytics loaded');
}

// Report javascript errors
function trackErrors() {
  if (window.addEventListener) {
    window.addEventListener('error', (e) => {
      if (e.lineno !== 0) {
        const ie = window.event || {};
        const errMsg = e.message || ie.errorMessage;
        const errSrc = e.filename || ie.errorUrl;
        const errLine = e.lineno || ie.errorLine;
        const gaCat = 'JavaScript Error';
        const gaAction = `${errMsg} in: ${errSrc} on line ${errLine}`;
        const bodyEl = document.querySelector('body');
        const gaLabel = bodyEl.dataset.blacklightContext;
        const url = document.location.href;

        ga('send', 'event', gaCat, gaAction, `${gaLabel} - ${url}`, {
          nonInteraction: true,
        });
      }
    });
  }
}

// Track submittes searches
function trackSearchForm() {
  const bodyEl = document.querySelector('body');
  const searchForms = bodyEl.querySelectorAll('.search-query-form');

  searchForms.forEach((node) => {
    node.addEventListener('submit', (e) => {
      e.preventDefault();

      const category = `Search - ${location.search == '' ? 'home' : 'results'}`;
      const action = node.querySelector('#search_field').value;
      const label = node.querySelector('#q').value;
      const value = label.split(' ').length || 0;

      function submitForm() {
        node.submit();
      }
      ga("send", "event", category, action, label, value, {hitCallback: actWithTimeOut(function(){
          submitForm();
        })
      });
    });
  })
}

export {
  init,
  trackErrors,
  trackSearchForm,
}
