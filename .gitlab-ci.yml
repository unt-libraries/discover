stages:
  - build-container
  - test
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: none
  SSH_PRIVATE_KEY: $LIBWEBRUNNER_PRIVATE_KEY
  SSH_USER: $SSH_DEPLOY_USER
  SSH_SERVER: $SSH_DEPLOY_SERVER

# Include before_script to download utilities repo & run scripts
include: 'https://content.library.unt.edu/www/utilities/raw/master/scripts/gitlab-ci/.before-script-utils-repo.yml'


########################
# Build container stage
########################

.build-container:
  stage: build-container
  tags:
    - dind
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $FULL_IMAGE_NAME || true
    - docker build --cache-from $FULL_IMAGE_NAME -f Dockerfile -t $FULL_IMAGE_NAME .
    - docker push $FULL_IMAGE_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - changes:
        - Dockerfile*
        - .gitlab-ci.yml
        - Gemfile*
        - package*.json
        - yarn.lock
      when: always
    - when: manual
      allow_failure: true

build-container:alpha:
  extends: .build-container
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/alpha:latest
    RAILS_PORT: 3000
    RAILS_ENV: development
    RAILS_SERVE_STATIC_FILES: "false"

build-container:beta:
  extends: .build-container
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/beta:latest
    RAILS_PORT: 3100
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: "true"

build-container:production:
  extends: .build-container
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/production:latest
    RAILS_PORT: 3200
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: "true"

#############
# Test stage
#############

test:
  tags:
    - dind
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    ADD_PACKAGES: py-pip python-dev libffi-dev openssl-dev gcc libc-dev make docker-compose-plugin
    RAILS_PORT: 3300
    RAILS_ENV: test
    RAILS_SERVE_STATIC_FILES: "true"
  script:
    - "docker info"
    - "echo \"$RAILS_MASTER_KEY\" >> .env"
    - "docker compose build"
    - "docker compose run --rm web rake db:create"
    - "docker compose run --rm web rake db:migrate"
    - "docker compose run --rm web rails assets:precompile"
    - "docker compose run --rm web bundle exec rspec --format documentation"
    - "docker compose down"
  when: manual


###############
# Deploy stage
###############

.deploy:
  stage: deploy
  image: $CI_REGISTRY/www/utilities/deploy:latest
  variables:
    GIT_SUBMODULE_STRATEGY: none
    GIT_BRANCH: master
    SITE_DEST_DIR: /var/www/html/$CI_ENVIRONMENT_URL
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  before_script:
    - source /app/prepare_ssh.sh
  script:
    - ssh $SSH_USER@$SSH_SERVER "
        cd $SITE_DEST_DIR &&
        git fetch --all &&
        git checkout -f $CI_COMMIT_SHA &&
        rm -f .env &&
        echo APP_IMAGE_NAME=$FULL_IMAGE_NAME >> .env &&
        echo RAILS_PORT=$RAILS_PORT >> .env &&
        echo RAILS_ENV=$RAILS_ENV >> .env &&
        echo NODE_ENV=$RAILS_ENV >> .env &&
        echo RAILS_SERVE_STATIC_FILES=$RAILS_SERVE_STATIC_FILES >> .env &&
        echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env &&
        echo RAILS_MASTER_KEY=$RAILS_MASTER_KEY >> .env &&
        echo WEB_CONCURRENCY=$WEB_CONCURRENCY >> .env &&
        docker compose pull &&
        docker compose up -d &&
        docker compose exec -T web rails assets:precompile &&
        docker compose restart
        "
  when: manual

deploy:alpha:
  extends: .deploy
  environment:
    name: alpha
    url: alpha.discover.library.unt.edu
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/alpha:latest
    RAILS_PORT: 3000
    RAILS_ENV: development
    RAILS_SERVE_STATIC_FILES: "false"
    WEB_CONCURRENCY: 1

deploy:beta:
  extends: .deploy
  environment:
    name: beta
    url: beta.discover.library.unt.edu
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/beta:latest
    RAILS_PORT: 3100
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: "true"
    WEB_CONCURRENCY: 1

deploy:production:
  extends: .deploy
  environment:
    name: production
    url: discover.library.unt.edu
  variables:
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/production:latest
    RAILS_PORT: 3200
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: "true"
    WEB_CONCURRENCY: 4
