stages:
  - build-container
  - test
  - release
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: none
  SSH_PRIVATE_KEY: $LIBWEBRUNNER_PRIVATE_KEY
  SSH_USER: $SSH_DEPLOY_USER
  SSH_SERVER: $SSH_DEPLOY_SERVER
  FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  PROD_IMAGE_NAME: $CI_REGISTRY_IMAGE:latest

# Include before_script to download utilities repo & run scripts
include: 'https://content.library.unt.edu/www/utilities/raw/master/scripts/gitlab-ci/.before-script-utils-repo.yml'


########################
# Build container stage
########################

build-container:
  stage: build-container
  tags:
    - dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Attempting to pull cache image $FULL_IMAGE_NAME"
    - docker pull $FULL_IMAGE_NAME || echo "Cache image pull failed or image doesn't exist yet."
    - echo "Building image $FULL_IMAGE_NAME"
    - docker build \
        --secret id=RAILS_MASTER_KEY \
        --build-arg APP_BUILD_TYPE="production" \
        --build-arg BUILD_TIME_RAILS_ENV="production" \
        --cache-from $FULL_IMAGE_NAME \
        -t $FULL_IMAGE_NAME .
    - echo "Pushing image $FULL_IMAGE_NAME"
    - docker push $FULL_IMAGE_NAME
  rules:
    # Run automatically ONLY if dependency files change on any branch (except when manual is chosen)
    - if: $CI_PIPELINE_SOURCE != 'schedule' && $CI_PIPELINE_SOURCE != 'api' # Avoid auto-runs for schedules/api unless intended
      changes:
        - Dockerfile*
        - .gitlab-ci.yml
        - Gemfile*
        - package*.json
        - yarn.lock
    # Allow manual trigger anytime
    - when: manual
      allow_failure: true


#############
# Test stage
#############

test:
  tags:
    - dind
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    ADD_PACKAGES: py-pip python-dev libffi-dev openssl-dev gcc libc-dev make docker-compose-plugin
    RAILS_PORTF_FOR_TEST: 3300
    TEST_IMAGE_TAG: "$CI_REGISTRY_IMAGE/test:$CI_COMMIT_SHA"
  script:
    - "docker info"

    - echo "Creating .env file for test runtime..."
    - rm -f .env
    - echo "RAILS_MASTER_KEY=$RAILS_MASTER_KEY" >> .env
    - echo "RAILS_ENV=test" >> .env
    - echo "RAILS_PORT=$RAILS_PORT_FOR_TEST" >> .env
    - echo "APP_IMAGE_NAME=$TEST_IMAGE_TAG" >> .env
    - echo "RAILS_SERVE_STATIC_FILES=true" >> .env
    - echo "NODE_ENV=test" >> .env

    - echo "Building test-specific Docker image $TEST_IMAGE_TAG..."
    - docker build \
      --secret id=RAILS_MASTER_KEY \
      --build-arg APP_BUILD_TYPE="test" \
      --build-arg BUILD_TIME_RAILS_ENV="test" \
      -t "$TEST_IMAGE_TAG ."

    - echo "Setting up test database..."
    - docker compose -f compose.deploy.yaml run --rm web bundle exec rails db:setup

    - echo "Running RSpec tests..."
    - docker compose -f compose.deploy.yaml run --rm web bundle exec rspec --format documentation

    - echo "Running Vitest tests..."
    - docker compose -f compose.deploy.yaml run --rm web vitest run

    - echo "Cleaning up test environment..."
    - docker compose -f compose.deploy.yaml down --remove-orphans
  when: manual


################
# Release stage
################

release-image:
  tags:
    - dind
  stage: release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # This job only runs if build-container ran, so $FULL_IMAGE_NAME should exist from this pipeline
    - echo "Pulling image built in this pipeline $FULL_IMAGE_NAME"
    - docker pull $FULL_IMAGE_NAME
    - echo "Tagging $FULL_IMAGE_NAME as $PROD_IMAGE_NAME"
    - docker tag $FULL_IMAGE_NAME $PROD_IMAGE_NAME
    - echo "Pushing production tag $PROD_IMAGE_NAME"
    - docker push $PROD_IMAGE_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
  needs:
    - job: build-container
      optional: false

###############
# Deploy stage
###############

.deploy:
  stage: deploy
  image: $CI_REGISTRY/www/utilities/deploy:latest
  environment:
    url: https://$SITE_DOMAIN
  variables:
    GIT_SUBMODULE_STRATEGY: none
    GIT_BRANCH: main
    SITE_DEST_DIR: /var/www/html/$SITE_DOMAIN
  before_script:
    - source /app/prepare_ssh.sh
  script:
    - echo "Deploying commit $CI_COMMIT_SHA using image $FULL_IMAGE_NAME for RAILS_ENV=$RAILS_ENV"
    - ssh $SSH_USER@$SSH_SERVER "
        set -e; # Exit on error
        echo '--- Ensuring deployment directory exists ---' &&
        mkdir -p $SITE_DEST_DIR &&
        cd $SITE_DEST_DIR &&
        echo '--- Fetching latest deployment configuration (compose.deploy.yaml) ---' &&
        git fetch --all &&
        git checkout -f $CI_COMMIT_SHA &&
        echo '--- Creating .env file ---' &&
        rm -f .env &&
        echo APP_IMAGE_NAME=$FULL_IMAGE_NAME >> .env &&
        echo RAILS_PORT=$RAILS_PORT >> .env &&
        echo RAILS_ENV=$RAILS_ENV >> .env &&
        echo NODE_ENV=$RAILS_ENV >> .env &&
        echo RAILS_SERVE_STATIC_FILES=$RAILS_SERVE_STATIC_FILES >> .env &&
        echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> .env &&
        echo RAILS_MASTER_KEY=$RAILS_MASTER_KEY >> .env &&
        echo WEB_CONCURRENCY=$WEB_CONCURRENCY >> .env &&
        echo ENABLE_VITE_HMR_CLIENT=$ENABLE_VITE_HMR_CLIENT >> .env &&
        echo '--- Pulling required Docker image $FULL_IMAGE_NAME ---' &&
        docker compose -f compose.deploy.yaml pull &&
        echo '--- Starting application containers ---' &&
        docker compose -f compose.deploy.yaml up -d --remove-orphans &&
        echo '--- Copying assets to public directory on host ---' &&
        docker compose -f compose.deploy.yaml cp web:/app/public $SITE_DEST_DIR &&
        echo '--- Deployment complete ---'
        "
  when: manual
  rules:
    - when: manual

deploy:alpha:
  extends: .deploy
  environment:
    name: alpha
  variables:
    SITE_DOMAIN: alpha.discover.library.unt.edu
    RAILS_PORT: 3000
    RAILS_ENV: development
    RAILS_SERVE_STATIC_FILES: "false"
    WEB_CONCURRENCY: 1
    ENABLE_VITE_HMR_CLIENT: "true"

deploy:beta:
  extends: .deploy
  environment:
    name: beta
  variables:
    SITE_DOMAIN: beta.discover.library.unt.edu
    RAILS_PORT: 3100
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: "true"
    WEB_CONCURRENCY: 1
    ENABLE_VITE_HMR_CLIENT: "false"

deploy:production:
  extends: .deploy
  environment:
    name: production
  variables:
    SITE_DOMAIN: discover.library.unt.edu
    FULL_IMAGE_NAME: $PROD_IMAGE_NAME
    RAILS_PORT: 3200
    RAILS_ENV: production
    RAILS_SERVE_STATIC_FILES: "true"
    WEB_CONCURRENCY: 8
    ENABLE_VITE_HMR_CLIENT: "false"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
